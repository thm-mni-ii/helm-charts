{{ if and .Values.core.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-core
  labels:
    app: {{ .Release.Name }}-core
spec:
  selector:
    matchLabels:
      app: {{ .Release.Name }}-core
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-core
    spec:
      containers:
      - name: {{ .Release.Name }}-core
        image: {{ include "fbs-core-image" . }}
        imagePullPolicy: {{ .Values.core.image.pullPolicy }}
        ports:
        - containerPort: 80
          name: http
        - containerPort: 443
          name: https
        readinessProbe:
          httpGet:
            path: /actuator/health
            port: 443
            scheme: HTTPS
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        livenessProbe:
          httpGet:
            path: /actuator/health
            port: 443
            scheme: HTTPS
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
        env:
          - name: SERVER_HOST
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-common
                key: host
          - name: MYSQL_URI
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-core
                key: mysqlJdbclUri
          - name: MYSQL_USER
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-core
                key: mysqlUser
          - name: MYSQL_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-core
                key: mysqlPassword
          - name: MINIO_URL
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-core
                key: minioUrl
          - name: MINIO_USER
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-minio
                key: root-user
          - name: MINIO_USER_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-minio
                key: root-password
          - name: JWT_SECRET
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-core
                key: jwtSecret
          - name: CLASSROOM_URL
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-core
                key: classroomUrl
          - name: CLASSROOM_SECRET
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-core
                key: classroomSecret
          - name: CLASSROOM_TLS_INSECURE
            value: "true"
          {{ if .Values.runner.enabled }}
          - name: MASTER_RUNNER_URL
            value: https://{{ .Release.Name }}-runner:8081
          - name: MASTER_RUNNER_TLS_INSECURE
            value: "true"
          {{ end }}
          {{ if .Values.runner.sqlChecker.enabled }}
          - name: MONGODB_URI
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-sql-checker
                key: mongodbUri
          - name: MONGODB_DATABASE
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-sql-checker
                key: mongoDatabase
          {{ end }}
          - name: SELF_URL
            value: https://{{ .Release.Name }}-core
          {{ if .Values.core.config.ldap.enabled }}
          - name: LDAP_ENABLED
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-ldap
                key: enabled
          - name: LDAP_ALLOW_LOGIN
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-ldap
                key: allowLogin
          - name: LDAP_BASE_DN
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-ldap
                key: baseDn
          - name: LDAP_URL
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-ldap
                key: url
          - name: LDAP_START_TLS
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-ldap
                key: startTls
          - name: LDAP_FILTER
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-ldap
                key: filter
          - name: LDAP_TIMEOUT
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-ldap
                key: timeout
          - name: LDAP_BIND_ENABLED
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-ldap
                key: bind_enabled
          - name: LDAP_BIND_DN
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-ldap
                key: bind_dn
          - name: LDAP_BIND_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Release.Name }}-ldap
                key: bind_password
          - name: LDAP_ATTRIBUTE_NAMES_UID
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-ldap
                key: attribute_uid
          - name: LDAP_ATTRIBUTE_NAMES_SN
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-ldap
                key: attribute_sn
          - name: LDAP_ATTRIBUTE_NAMES_NAME
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-ldap
                key: attribute_name
          - name: LDAP_ATTRIBUTE_NAMES_MAIL
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-ldap
                key: attribute_mail
          {{ end }}
          - name: TRUSTED_PROXIES
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-anti-brute-force
                key: trusted_proxy_count
          - name: BRUTEFORCE_INTERVAL
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-anti-brute-force
                key: interval
          - name: BRUTEFORCE_ATTEMPTS
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-anti-brute-force
                key: max_attempts
          - name: BRUTEFORCE_ALLOW_LIST
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-anti-brute-force
                key: allow_list
          - name: SQL_PLAYGROUND_SHARE_PUBLIC_HOST
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-core
                key: sqlPlaygroundSharePublicHost
          - name: SQL_PLAYGROUND_SHARE_PUBLIC_PORT
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-core
                key: sqlPlaygroundSharePublicPort
          - name: ID_SALT
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-core
                key: idSalt
          - name: MODELLING_URL
            valueFrom:
              configMapKeyRef:
                name: {{ .Release.Name }}-integrations
                key: modellingUrl
        resources:
          requests:
            cpu: {{ .Values.core.resources.cpu.request }}
            memory: {{ .Values.core.resources.memory.request }}
          limits:
            cpu: {{ .Values.core.resources.cpu.limit }}
            memory: {{ .Values.core.resources.memory.limit }}
        volumeMounts:
        - name: config
          mountPath: /usr/local/fbs-core.api/conf
        - name: upload-dir
          mountPath: /upload-dir
      volumes:
      - name: config
        persistentVolumeClaim:
          claimName: {{ .Release.Name }}-core-config
      - name: upload-dir
        persistentVolumeClaim:
          claimName: {{ .Release.Name }}-core-upload-dir
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-core
data:
  mysqlJdbclUri: {{ print "jdbc:mysql://" .Release.Name "-mysql" ":3306" | quote }}
  mysqlUser:  {{ .Values.mysql.auth.username | quote }}
  minioUrl: {{ print "http://" .Release.Name "-minio" | quote }}
  classroomUrl: {{ include "digital-classroom-url" . | quote }}
  sqlPlaygroundSharePublicHost: {{ .Values.core.config.sqlPlaygroundShare.publicHost | quote }}
  sqlPlaygroundSharePublicPort: {{ .Values.core.config.sqlPlaygroundShare.publicPort | quote }}
  idSalt: {{ .Values.core.config.id.salt | quote }}
---
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: {{ .Release.Name }}-core
data:
  jwtSecret: {{ .Values.core.config.jwtSecret | b64enc | quote }}
  mysqlPassword: {{ .Values.mysql.auth.password | b64enc | quote }}
  classroomSecret: {{ include "digital-classroom-secret" . | b64enc | quote }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Release.Name }}-core-config
spec:
  accessModes:
    - {{ .Values.core.volumes.config.mode }}
  volumeMode: Filesystem
  resources:
    requests:
      storage: {{ .Values.core.volumes.config.size }}
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Release.Name }}-core-upload-dir
spec:
  accessModes:
    - {{ .Values.core.volumes.uploadDir.mode }}
  volumeMode: Filesystem
  resources:
    requests:
      storage: {{ .Values.core.volumes.uploadDir.size }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Release.Name }}-core
  labels:
    app: {{ .Release.Name }}-core
spec:
  selector:
    app: {{ .Release.Name }}-core
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 80
    - name: https
      protocol: TCP
      port: 443
      targetPort: 443
{{ if .Values.core.ingressRoute.enabled }}
---
apiVersion: traefik.io/v1alpha1
kind: ServersTransport
metadata:
  name: {{ .Release.Name }}-core
spec:
  insecureSkipVerify: true
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: {{ .Release.Name }}-core
spec:
  entryPoints:
    - websecure
  routes:
  - match: Host(`{{ .Values.common.config.hostname }}`)
    kind: Rule
    services:
    - name: {{ .Release.Name }}-core
      scheme: https
      serversTransport: {{ .Release.Name }}-core
      port: 443
{{ end }}
{{ end }}
